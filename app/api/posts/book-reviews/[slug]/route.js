
import { NextResponse } from 'next/server';
import { Client } from '@notionhq/client';
import { validate as uuidValidate } from 'uuid';

// ÂÅáË®≠ÊÇ®ÁöÑ lib/utils ‰∏≠ÂåÖÂê´ generateSlug Âíå notionRichTextToPlainText
import { generateSlug, notionRichTextToPlainText } from '../../../../../../lib/utils'; 

export const dynamic = 'force-dynamic' // Disable all caching
// export const runtime = 'edge' // Optional: Better for Notion API

// üéØ Ë®≠ÂÆöÊñáÁ´†ÂàÜÈ°ûÊâÄÈúÄÁöÑ Notion Â±¨ÊÄßÂêçÁ®± (ËàáÊÇ®ÂÖàÂâç‰ΩøÁî®ÁöÑ‰øùÊåÅ‰∏ÄËá¥)
const CATEGORY_PROPERTY_NAME = 'ËÆÄÊõ∏ÂøÉÂæó'; 

// ----------------------------------------------------
// Ê†ºÂºèÂåñ Notion ÂçÄÂ°äÁöÑËºîÂä©ÂáΩÊï∏ (üö® ÂøÖÈ†àÊñ∞Â¢ûÊ≠§ÂáΩÊï∏ üö®)
// ----------------------------------------------------
function formatBlocks(blocks) {
    if (!blocks) return '';

    // ÈÄôÊòØ‰∏ÄÂÄãËá®ÊôÇ/ÊúÄ‰ΩéÈôêÂ∫¶ÁâàÊú¨ÔºåÁî®ÊñºÊ∏¨Ë©¶ÂàÜÈ†ÅÊòØÂê¶Â∞áÊâÄÊúâÂçÄÂ°äËøîÂõû„ÄÇ
    // Â¶ÇÊûúÊÇ®ÁöÑÂâçÁ´ØÊòØËôïÁêÜ JSON Êï∏ÊìöÔºåÂâá‰ΩøÁî®ÈÄôÂÄã„ÄÇ
    return JSON.stringify(blocks); 
}
// ----------------------------------------------------


const notion = new Client({ auth: process.env.NOTION_API_KEY });

export async function GET(req, { params }) {
  const { slug } = params;

  if (!uuidValidate(slug)) {
    return NextResponse.json({ success: false, error: 'Invalid page ID' }, { status: 400 });
  }

  try {
    // Get page metadata
    const page = await notion.pages.retrieve({ page_id: slug });

    // 2. Áç≤ÂèñÈ†ÅÈù¢ÂÖßÂÆπ (Blocks) - ‰ΩøÁî®Âæ™Áí∞ÂàÜÈ†Å (Ëß£Ê±∫Èï∑ÊñáÁ´†Êà™Êñ∑ÂïèÈ°å)
        let allBlocks = [];
        let cursor = undefined; // Ê∏∏Ê®ôÔºåÁî®ÊñºË´ãÊ±Ç‰∏ã‰∏ÄÈ†Å
        let hasMore = true;     // Ê™¢Êü•ÊòØÂê¶ÈÇÑÊúâÊõ¥Â§öÂÖßÂÆπ

        // üö® ÈÄôË£°Â∞±ÊòØ hasMore ÁöÑ‰ΩçÁΩÆÂíå‰ΩúÁî® üö®
        while (hasMore) {
            const blockResponse = await notion.blocks.children.list({ 
                block_id: slug,
                start_cursor: cursor, // ÂÇ≥ÂÖ•Ê∏∏Ê®ô‰ª•Áç≤Âèñ‰∏ã‰∏ÄÈ†Å
                page_size: 100,      // ÊØèÊ¨°Ë´ãÊ±Ç 100 ÂÄãÂçÄÂ°ä
            });

            allBlocks = allBlocks.concat(blockResponse.results);
            // ÈóúÈçµÊ≠•È©üÔºöÊõ¥Êñ∞ hasMore Âíå cursor 
            hasMore = blockResponse.has_more;
            cursor = blockResponse.next_cursor;
        }


    // 3. Ê†ºÂºèÂåñÊñáÁ´† (Á¢∫‰øùÂâçÁ´ØËÉΩÊ≠£Á¢∫Ëß£ÊûêÊâÄÊúâÊ¨Ñ‰Ωç)
        const title = page.properties?.Name?.title?.[0]?.plain_text || 
                      page.properties?.['Post name']?.title?.[0]?.plain_text || 
                      'Untitled';
        
        const formattedPost = {
            id: page.id,
            title: title,
            slug: generateSlug(title), 
            url: page.properties?.['Post URL']?.url || page.url,
            featured_image: page.cover?.file?.url ||
                            page.cover?.external?.url ||
                            page.properties?.['Photo URL']?.url ||
                            null,
            published_at: page.properties?.['Post date original']?.date?.start ||
                          page.properties?.['Created time']?.created_time ||
                          page.last_edited_time,
            
            category: 'book-reviews', // Á¢∫‰øùÈ°ûÂà•ÂêçÁ®±Ê≠£Á¢∫
            
            tags: page.properties?.[CATEGORY_PROPERTY_NAME]?.multi_select?.map(cat => cat.name) || [],
            pinned: page.properties?.Pinned?.checkbox || false,
            excerpt: notionRichTextToPlainText(page.properties?.Excerpt?.rich_text) || '',
            
            // ‰ΩøÁî®Á¥ØÁ©çÁöÑ allBlocks Êï∏ÁµÑ
            content: formatBlocks(allBlocks), 
            rawProperties: page.properties
        };

        return NextResponse.json({
            success: true,
            data: formattedPost
        });
    // Get blocks (actual body content)
  //  const blocks = await notion.blocks.children.list({
  //    block_id: slug,
 //     page_size: 100, // increase if needed
//    });

 //   return NextResponse.json({
//      success: true,
//      data: {
//        page,
//        blocks: blocks.results,
//      },
//    });
  } catch (err) {
    console.error(err);
    return NextResponse.json({ success: false, error: 'Failed to fetch Notion page' }, { status: 500 });
  }
}
